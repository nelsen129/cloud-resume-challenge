name: "deploy-staging"

on:
  push:
    branches:
      - main

permissions:
  id-token: write
  contents: read

jobs:
  staging-build-frontend:
    name: "build-staging-frontend"
    runs-on: ubuntu-latest
    environment: staging

    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "19"

      - name: NPM ci
        run: npm ci

      - name: Build frontend code
        run: npm run build

      - name: Archive frontend code build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-stage
          path: frontend/out

  staging-deploy-frontend:
    name: "deploy-staging-frontend"
    runs-on: ubuntu-latest
    environment: staging
    needs:
      - staging-build-frontend

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/components/frontend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-stage
          path: frontend/out

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "${{ secrets.AWS_MANAGEMENT_ROLE }}"
          aws-region: us-east-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config="key=stage-frontend/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="../../environments/stage.tfvars" -var="role_arn=${{ secrets.AWS_GITHUB_ACTIONS_ROLE}}"

  staging-test-backend:
    name: "test-staging-backend"
    runs-on: ubuntu-latest
    environment: staging

    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache-dependency-path: backend/**/go.sum

      - name: Run test script
        run: ./test.sh

  staging-build-backend:
    name: "build-staging-backend"
    runs-on: ubuntu-latest
    environment: staging
    needs:
      - staging-test-backend

    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache-dependency-path: backend/**/go.sum

      - name: Run build script
        run: ./build.sh

      - name: Archive backend code build
        uses: actions/upload-artifact@v3
        with:
          name: backend-build-stage
          path: backend/out

  staging-deploy-backend:
    name: "deploy-staging-backend"
    runs-on: ubuntu-latest
    environment: staging
    needs:
      - staging-build-backend

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/components/backend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Download backend build
        uses: actions/download-artifact@v3
        with:
          name: backend-build-stage
          path: backend/out

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "${{ secrets.AWS_MANAGEMENT_ROLE }}"
          aws-region: us-east-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config="key=stage-backend/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="../../environments/stage.tfvars" -var="role_arn=${{ secrets.AWS_GITHUB_ACTIONS_ROLE}}"
