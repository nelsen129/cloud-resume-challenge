name: "deploy-development"

on:
  pull_request:
    types:
      - opened
      - edited
      - synchronize

permissions:
  id-token: write
  contents: read

jobs:
  development-build-frontend:
    name: "build-development-frontend"
    runs-on: ubuntu-latest
    environment: development

    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: "19"

      - name: NPM ci
        run: npm ci

      - name: Build frontend code
        run: npm run build

      - name: Archive frontend code build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build-dev-${{ github.head_ref }}
          path: frontend/out

  development-deploy-frontend:
    name: "deploy-development-frontend"
    runs-on: ubuntu-latest
    environment: development
    needs:
      - development-build-frontend

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/components/frontend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build-dev-${{ github.head_ref }}
          path: frontend/out

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "${{ secrets.AWS_MANAGEMENT_ROLE }}"
          aws-region: us-east-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config="key=dev-${{ github.head_ref }}-frontend/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="../../environments/dev.tfvars" -var="role_arn=${{ secrets.AWS_GITHUB_ACTIONS_ROLE}}" -var="environment=dev-${{ github.head_ref }}"

  development-test-backend:
    name: "test-development-backend"
    runs-on: ubuntu-latest
    environment: development

    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache-dependency-path: backend/**/go.sum

      - name: Run test script
        run: ./test.sh

  development-build-backend:
    name: "build-development-backend"
    runs-on: ubuntu-latest
    environment: development
    needs:
      - development-test-backend

    defaults:
      run:
        shell: bash
        working-directory: backend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: "1.20"
          cache-dependency-path: backend/**/go.sum

      - name: Run build script
        run: ./build.sh

      - name: Archive backend code build
        uses: actions/upload-artifact@v3
        with:
          name: backend-build-dev-${{ github.head_ref }}
          path: backend/out

  development-deploy-backend:
    name: "deploy-development-backend"
    runs-on: ubuntu-latest
    environment: development
    needs:
      - development-build-backend

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/components/backend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Download backend build
        uses: actions/download-artifact@v3
        with:
          name: backend-build-dev-${{ github.head_ref }}
          path: backend/out

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "${{ secrets.AWS_MANAGEMENT_ROLE }}"
          aws-region: us-east-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config="key=dev-${{ github.head_ref }}-backend/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="../../environments/dev.tfvars" -var="role_arn=${{ secrets.AWS_GITHUB_ACTIONS_ROLE}}" -var="environment=dev-${{ github.head_ref }}"

  development-deploy-integration:
    name: "deploy-development-integration"
    runs-on: ubuntu-latest
    environment: development
    needs:
      - development-deploy-frontend
      - development-deploy-backend

    defaults:
      run:
        shell: bash
        working-directory: infrastructure/components/integration

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Configure aws credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: "${{ secrets.AWS_MANAGEMENT_ROLE }}"
          aws-region: us-east-1

      - name: Terraform Format
        run: terraform fmt -check

      - name: Terraform Init
        run: terraform init -backend-config="key=dev-${{ github.head_ref }}-integration/terraform.tfstate"

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var-file="../../environments/dev.tfvars" -var="role_arn=${{ secrets.AWS_GITHUB_ACTIONS_ROLE}}" -var="environment=dev-${{ github.head_ref }}"

      - name: Set DNS hostname output
        run: echo "HOSTNAME=$(terraform output | grep route53_record_name | cut -d'"' -f 2)" >> hostname.env

      - name: Archive DNS hostname
        uses: actions/upload-artifact@v3
        with:
          name: hostname-dev-${{ github.head_ref }}
          path: infrastructure/components/integration/hostname.env

  development-cypress-run:
    name: "test-development-cypress"
    runs-on: ubuntu-latest
    environment: development
    needs:
      - development-deploy-integration

    defaults:
      run:
        shell: bash
        working-directory: frontend

    steps:
      - name: Git clone the repository
        uses: actions/checkout@v3

      - name: Download backend build
        uses: actions/download-artifact@v3
        with:
          name: hostname-dev-${{ github.head_ref }}
          path: frontend/hostname.env

      - name: Cypress run
        uses: cypress-io/github-action@v5
        with:
          working-directory: frontend
        env:
          CYPRESS_BASE_URL: "https://${cat hostname.env}"
